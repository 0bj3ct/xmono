package xmono;
option optimize_for = LITE_RUNTIME;

message DisasmMethodReq {
	required uint32 method_token = 1;
	required string image_name = 2;
}

message DisasmMethodRsp {
	required bool err = 1;
	optional string err_str = 2;
	optional string disasm_code = 3;
	optional bytes  asm_code = 4;    //测试编译模块用的
}

message ReplaceMethodReq {
	required int32 domain_id = 1;
	required uint32 method_token = 2;
	required string image_name = 3;
	required bytes new_code = 4;
	message ExceptionClause {
		required uint32 index = 1;
		required uint32 try_offset = 2;
		required uint32 try_len = 3;
		required uint32 handler_offset = 4;
		required uint32 handler_len = 5;
	}
	repeated ExceptionClause ex = 5;
}

message ReplaceMethodRsp {
	required bool err = 1;
	required string msg = 2;
}

message ListDomainRsp {
	required bool err = 1;
	repeated int32 id = 2;
}

message StackTraceReq {
	required string image_name = 1;
	required uint32 method_token = 2;
}

message StackTraceRsp {
	required bool err = 1;
	optional string err_str = 2;
	optional string stack = 3;
}

message UnStackTraceReq {
	required string image_name = 1;
	required uint32 method_token = 2;
}

message LuaExecReq {
	required string lua_code = 1;
}

enum LogLevel{
	err = 1;
	info = 2;
	warring = 3;
	debug = 4;
}
//该消息作为lua中的任意回包
message LuaExecRsp {
	required LogLevel level = 1;
	required string message = 2;
}

message LuaHookReq {
	required bool disable = 1;
	required string image_name = 2;
	required uint32 method_token = 3;
	required string lua_code = 4;
}

message LuaHookRsp {
	required LogLevel level = 1;
	required string message = 2;
}